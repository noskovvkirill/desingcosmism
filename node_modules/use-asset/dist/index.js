import{useMemo as e}from"react";const r=[],n=(e,r)=>e.length===r.length&&e.every((e,n)=>e===r[n]);function o(e,r,o,s=0,t=!1){for(const e of r)if(n(o,e.args)){if(t)return;if(e.error)throw e.error;if(e.response)return e.response;throw e.promise}const i={args:o,promise:e(...o).then(e=>i.response=null==e||e).catch(e=>i.error=e).then(()=>{s>0&&setTimeout(()=>{const e=r.indexOf(i);-1!==e&&r.splice(e,1)},s)})};if(r.push(i),!t)throw i.promise}function s(e,...r){if(void 0===r)e.splice(0,e.length);else{const o=e.find(e=>n(r,e.args));if(o){const r=e.indexOf(o);-1!==r&&e.splice(r,1)}}}function t(e,r=0){const t=[];return{read:(...n)=>o(e,t,n,r),preload:(...n)=>{o(e,t,n,r,!0)},clear:(...e)=>s(t,...e),peek:(...e)=>{var r;return null==(r=t.find(r=>n(e,r.args)))?void 0:r.response}}}function i(n,s){return e(()=>o(n,r,s,i.lifespan),s)}i.lifespan=0,i.clear=(...e)=>s(r,...e),i.preload=(e,...n)=>{o(e,r,n,i.lifespan,!0)},i.peek=(...e)=>{var o;return null==(o=r.find(r=>n(e,r.args)))?void 0:o.response};export{t as createAsset,i as useAsset};
