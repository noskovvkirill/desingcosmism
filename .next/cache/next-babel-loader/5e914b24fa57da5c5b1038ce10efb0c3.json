{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kirill/Desktop/DESIGN3D/components/baby.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as THREE from \"three\";\nimport React from 'react';\nimport { useRef, useState, useEffect } from 'react';\nimport { useThree, useFrame, useLoader } from \"react-three-fiber\";\nimport { useFBX } from '@react-three/drei/useFBX';\n\nconst BabyFBX = ({\n  setImage,\n  isScreenshot,\n  random\n}) => {\n  const {\n    0: babySnapshot,\n    1: setBabySnapshot\n  } = useState(null);\n  let textures = ['crocodile', 'dragon', 'elephant', 'flowers', 'foil', 'freckle', 'fur1', 'fur2', 'fur3', 'giraffe1', 'giraffe2', 'hairy1', 'hairy2', 'kabk', 'leather', 'lizard', 'orange', 'pattern', 'peach', 'rhino', 'skin1', 'skin2', 'snake1', 'snake2', 'snake3', 'sponge', 'strawberry', 'tattoo1', 'tattoo2', 'veiny'];\n  const {\n    0: texture,\n    1: setTexture\n  } = useState(useLoader(THREE.TextureLoader, `img/${textures[random]}.jpg`));\n  const mesh = useRef();\n  let fbx = useFBX('/baby6.fbx');\n  const size = [7, 8 - Math.random() * (1 - -1) + -1, 7];\n  const {\n    gl,\n    canvas\n  } = useThree();\n  useEffect(() => {\n    setImage(babySnapshot);\n  }, [babySnapshot]);\n  useFrame(canvas => {\n    // if(isScreenshot){\n    setBabySnapshot(canvas.gl.domElement.toDataURL()); // }\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({}, fbx.children[0]), {}, {\n    ref: mesh,\n    position: [0, -2.5, 0],\n    scale: [7, 7, 7],\n    name: \"Object_0\",\n    rotation: [0, 0, 0],\n    children: /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      attach: \"material\",\n      map: texture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\nconst UseFBXScene = ({\n  setImage,\n  isScreenshot,\n  random\n}) => {\n  return (\n    /*#__PURE__*/\n    //   <Suspense fallback={null}>\n    _jsxDEV(BabyFBX, {\n      setImage: setImage,\n      isScreenshot: isScreenshot,\n      random: random\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) //   </Suspense>\n\n  );\n};\n\nexport default /*#__PURE__*/React.memo(UseFBXScene);","map":{"version":3,"sources":["/Users/kirill/Desktop/DESIGN3D/components/baby.js"],"names":["THREE","React","useRef","useState","useEffect","useThree","useFrame","useLoader","useFBX","BabyFBX","setImage","isScreenshot","random","babySnapshot","setBabySnapshot","textures","texture","setTexture","TextureLoader","mesh","fbx","size","Math","gl","canvas","domElement","toDataURL","children","UseFBXScene","memo"],"mappings":"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","sourcesContent":["import * as THREE from \"three\"\nimport React from 'react'\nimport { useRef, useState, useEffect } from 'react'\nimport { useThree,useFrame, useLoader} from \"react-three-fiber\"\nimport { useFBX } from '@react-three/drei/useFBX'\n\n\n\nconst BabyFBX = ({setImage, isScreenshot, random}) => {\n    const [babySnapshot, setBabySnapshot] = useState(null)\n    let textures = ['crocodile','dragon', 'elephant', 'flowers', 'foil', 'freckle', 'fur1', 'fur2', 'fur3', 'giraffe1', 'giraffe2', 'hairy1', 'hairy2', 'kabk', 'leather', 'lizard', 'orange', 'pattern', 'peach', 'rhino', 'skin1', 'skin2', 'snake1', 'snake2','snake3', 'sponge', 'strawberry', 'tattoo1', 'tattoo2', 'veiny']\n    const [texture, setTexture] = useState(useLoader(THREE.TextureLoader, `img/${textures[random]}.jpg`))\n    const mesh = useRef()\n    let fbx = useFBX('/baby6.fbx')\n    const size = [7, (8- Math.random() * (1 -(-1)) + (-1)), 7]\n    \n \n  \n    const { \n      gl,             \n      canvas,              \n    } = useThree()\n\n   \n\n\n    useEffect(()=>{\n        setImage(babySnapshot)\n    },[babySnapshot])\n  \n  \n    useFrame((canvas) => {\n          // if(isScreenshot){\n            setBabySnapshot(canvas.gl.domElement.toDataURL())\n          // }\n    })\n      \n\n      return (\n        <mesh\n        {...fbx.children[0]}\n        ref={mesh}\n        position={[0, -2.5, 0]}\n        scale={[7,7,7]}\n        name=\"Object_0\"\n        rotation={[0, 0, 0]}\n      >\n            <meshBasicMaterial  attach=\"material\" map={texture}/>  \n      </mesh>\n      )\n  }\n  \n  const UseFBXScene = ({setImage, isScreenshot, random}) => {\n    return (\n    //   <Suspense fallback={null}>\n        <BabyFBX setImage={setImage} isScreenshot={isScreenshot} random={random}/>\n    //   </Suspense>\n    )\n  }\n\n  export default React.memo(UseFBXScene)"]},"metadata":{},"sourceType":"module"}