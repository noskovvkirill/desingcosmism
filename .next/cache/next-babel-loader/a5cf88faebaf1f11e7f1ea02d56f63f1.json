{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kirill/Desktop/DESIGN3D/components/one.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as THREE from \"three\";\nimport React from 'react';\nimport { useRef, Suspense, useState } from 'react';\nimport { useThree, useFrame } from \"react-three-fiber\";\nimport { useFBX } from '@react-three/drei/useFBX';\nimport { Bloom } from '@react-three/postprocessing';\nimport { useRouter } from 'next/router';\n\nvar FBX = function FBX(_ref) {\n  _s();\n\n  var click = _ref.click;\n  var mesh = useRef();\n  var fbx = useFBX('/models/1.fbx');\n\n  var _useThree = useThree(),\n      gl = _useThree.gl,\n      canvas = _useThree.canvas;\n\n  var _useState = useState(false),\n      hovered = _useState[0],\n      setHover = _useState[1];\n\n  var _useState2 = useState(false),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  useFrame(function () {\n    if (hovered) {\n      // mesh.current.rotation.x += 0.01\n      mesh.current.rotation.y += 0.1;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({}, fbx.children[0]), {}, {\n    ref: mesh,\n    position: [0, 0, 4],\n    scale: [0.1, 0.1, 0.1],\n    name: \"Object_0\",\n    rotation: [0, 0, 0],\n    onClick: function onClick(e) {\n      return click();\n    },\n    onPointerOver: function onPointerOver(e) {\n      return setHover(true);\n    },\n    onPointerOut: function onPointerOut(e) {\n      return setHover(false);\n    }\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 11\n  }, _this);\n};\n\n_s(FBX, \"GP4wlAa7/FwK/gKHn4hY8hcA/UI=\", false, function () {\n  return [useFBX, useThree, useFrame];\n});\n\n_c = FBX;\n\nvar UseFBXScene = function UseFBXScene(_ref2) {\n  var clickOne = _ref2.clickOne;\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    callback: false,\n    children: /*#__PURE__*/_jsxDEV(FBX, {\n      click: clickOne\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 7\n  }, _this);\n};\n\n_c2 = UseFBXScene;\nexport default UseFBXScene;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FBX\");\n$RefreshReg$(_c2, \"UseFBXScene\");","map":{"version":3,"sources":["/Users/kirill/Desktop/DESIGN3D/components/one.js"],"names":["THREE","React","useRef","Suspense","useState","useThree","useFrame","useFBX","Bloom","useRouter","FBX","click","mesh","fbx","gl","canvas","hovered","setHover","active","setActive","current","rotation","y","children","e","UseFBXScene","clickOne"],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAkC,mBAAlC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,KAAT,QAAsB,6BAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAGA,IAAMC,GAAG,GAAG,SAANA,GAAM,OAAa;AAAA;;AAAA,MAAXC,KAAW,QAAXA,KAAW;AAGrB,MAAMC,IAAI,GAAGV,MAAM,EAAnB;AACA,MAAIW,GAAG,GAAGN,MAAM,CAAC,eAAD,CAAhB;;AAJqB,kBAQjBF,QAAQ,EARS;AAAA,MAMnBS,EANmB,aAMnBA,EANmB;AAAA,MAOnBC,MAPmB,aAOnBA,MAPmB;;AAAA,kBAUOX,QAAQ,CAAC,KAAD,CAVf;AAAA,MAUdY,OAVc;AAAA,MAULC,QAVK;;AAAA,mBAWOb,QAAQ,CAAC,KAAD,CAXf;AAAA,MAWdc,MAXc;AAAA,MAWNC,SAXM;;AAarBb,EAAAA,QAAQ,CAAC,YAAM;AACb,QAAGU,OAAH,EAAW;AAET;AACAJ,MAAAA,IAAI,CAACQ,OAAL,CAAaC,QAAb,CAAsBC,CAAtB,IAA2B,GAA3B;AACD;AACF,GANO,CAAR;AAWE,sBAEI,gDACIT,GAAG,CAACU,QAAJ,CAAa,CAAb,CADJ;AAEA,IAAA,GAAG,EAAEX,IAFL;AAGA,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHV;AAIA,IAAA,KAAK,EAAE,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAJP;AAKA,IAAA,IAAI,EAAC,UALL;AAMA,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANV;AAOA,IAAA,OAAO,EAAE,iBAAAY,CAAC;AAAA,aAAEb,KAAK,EAAP;AAAA,KAPV;AAQA,IAAA,aAAa,EAAE,uBAAAa,CAAC;AAAA,aAAIP,QAAQ,CAAC,IAAD,CAAZ;AAAA,KARhB;AASA,IAAA,YAAY,EAAE,sBAAAO,CAAC;AAAA,aAAIP,QAAQ,CAAC,KAAD,CAAZ;AAAA;AATf;AAAA;AAAA;AAAA;AAAA,WAFJ;AAgBH,CAxCH;;GAAMP,G;UAIQH,M,EAINF,Q,EAKJC,Q;;;KAbEI,G;;AA4CJ,IAAMe,WAAW,GAAG,SAAdA,WAAc,QAAgB;AAAA,MAAdC,QAAc,SAAdA,QAAc;AAIlC,sBACE,QAAC,QAAD;AAAU,IAAA,QAAQ,EAAE,KAApB;AAAA,2BACI,QAAC,GAAD;AAAK,MAAA,KAAK,EAAEA;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CATD;;MAAMD,W;AAWN,eAAeA,WAAf","sourcesContent":["import * as THREE from \"three\"\nimport React from 'react'\nimport { useRef, Suspense, useState} from 'react'\nimport { useThree, useFrame} from \"react-three-fiber\"\nimport { useFBX } from '@react-three/drei/useFBX'\nimport { Bloom } from '@react-three/postprocessing'\nimport { useRouter } from 'next/router'\n\n\nconst FBX = ({click}) => {\n\n  \n    const mesh = useRef()\n    let fbx = useFBX('/models/1.fbx')\n    const { \n      gl,             \n      canvas,              \n    } = useThree()\n\n    const [hovered, setHover] = useState(false)\n    const [active, setActive] = useState(false)\n\n    useFrame(() => {\n      if(hovered){\n     \n        // mesh.current.rotation.x += 0.01\n        mesh.current.rotation.y += 0.1\n      }\n    })\n\n   \n\n\n      return (\n       \n          <mesh\n          {...fbx.children[0]}\n          ref={mesh}\n          position={[0, 0, 4]}\n          scale={[0.1,0.1,0.1]}\n          name=\"Object_0\"\n          rotation={[0, 0, 0]}\n          onClick={e=>click()}\n          onPointerOver={e => setHover(true)}\n          onPointerOut={e => setHover(false)}\n        >\n        </mesh>\n    \n      )\n  }\n\n\n  \n  const UseFBXScene = ({clickOne}) => {\n\n\n\n    return (\n      <Suspense callback={false}>\n          <FBX click={clickOne}/>\n        </Suspense>\n    )\n  }\n\n  export default UseFBXScene "]},"metadata":{},"sourceType":"module"}