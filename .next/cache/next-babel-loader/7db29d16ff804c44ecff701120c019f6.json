{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kirill/Desktop/DESIGN3D/components/baby.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as THREE from \"three\";\nimport React from 'react';\nimport { useRef } from 'react';\nimport { useThree } from \"react-three-fiber\";\nimport { useFBX } from '@react-three/drei/useFBX';\n\nconst BabyFBX = () => {\n  // const [babySnapshot, setBabySnapshot] = useState(null)\n  // const [texture, setTexture] = useState(useLoader(THREE.TextureLoader, `img/${textures[random]}.jpg`))\n  const mesh = useRef();\n  let fbx = useFBX('/baby6.fbx'); // const size = [7, (8- Math.random() * (1 -(-1)) + (-1)), 7]\n\n  const {\n    gl,\n    canvas\n  } = useThree();\n  return /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({}, fbx.children[0]), {}, {\n    ref: mesh,\n    position: [0, -2.5, 0],\n    scale: [7, 7, 7],\n    name: \"Object_0\",\n    rotation: [0, 0, 0]\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\nconst UseFBXScene = () => {\n  return /*#__PURE__*/_jsxDEV(BabyFBX, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\nexport default /*#__PURE__*/React.memo(UseFBXScene);","map":{"version":3,"sources":["/Users/kirill/Desktop/DESIGN3D/components/baby.js"],"names":["THREE","React","useRef","useThree","useFBX","BabyFBX","mesh","fbx","gl","canvas","children","UseFBXScene","memo"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAsB,OAAtB;AACA,SAASC,QAAT,QAAwB,mBAAxB;AACA,SAASC,MAAT,QAAuB,0BAAvB;;AAIA,MAAMC,OAAO,GAAG,MAAM;AAClB;AACA;AACA,QAAMC,IAAI,GAAGJ,MAAM,EAAnB;AACA,MAAIK,GAAG,GAAGH,MAAM,CAAC,YAAD,CAAhB,CAJkB,CAKlB;;AAIA,QAAM;AACJI,IAAAA,EADI;AAEJC,IAAAA;AAFI,MAGFN,QAAQ,EAHZ;AAKE,sBACE,gDACII,GAAG,CAACG,QAAJ,CAAa,CAAb,CADJ;AAEA,IAAA,GAAG,EAAEJ,IAFL;AAGA,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAC,GAAL,EAAU,CAAV,CAHV;AAIA,IAAA,KAAK,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAJP;AAKA,IAAA,IAAI,EAAC,UALL;AAMA,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AANV;AAAA;AAAA;AAAA;AAAA,UADF;AAYH,CA1BH;;AA4BE,MAAMK,WAAW,GAAG,MAAM;AACxB,sBACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UADJ;AAGD,CAJD;;AAMA,4BAAeV,KAAK,CAACW,IAAN,CAAWD,WAAX,CAAf","sourcesContent":["import * as THREE from \"three\"\nimport React from 'react'\nimport { useRef} from 'react'\nimport { useThree} from \"react-three-fiber\"\nimport { useFBX } from '@react-three/drei/useFBX'\n\n\n\nconst BabyFBX = () => {\n    // const [babySnapshot, setBabySnapshot] = useState(null)\n    // const [texture, setTexture] = useState(useLoader(THREE.TextureLoader, `img/${textures[random]}.jpg`))\n    const mesh = useRef()\n    let fbx = useFBX('/baby6.fbx')\n    // const size = [7, (8- Math.random() * (1 -(-1)) + (-1)), 7]\n    \n \n  \n    const { \n      gl,             \n      canvas,              \n    } = useThree()\n\n      return (\n        <mesh\n        {...fbx.children[0]}\n        ref={mesh}\n        position={[0, -2.5, 0]}\n        scale={[7,7,7]}\n        name=\"Object_0\"\n        rotation={[0, 0, 0]}\n      >\n            {/* <meshBasicMaterial  attach=\"material\" map={texture}/>   */}\n      </mesh>\n      )\n  }\n  \n  const UseFBXScene = () => {\n    return (\n        <BabyFBX/>\n    )\n  }\n\n  export default React.memo(UseFBXScene)"]},"metadata":{},"sourceType":"module"}