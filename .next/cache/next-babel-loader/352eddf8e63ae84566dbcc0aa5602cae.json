{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kirill/Desktop/DESIGN3D/components/baby.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as THREE from \"three\";\nimport React from 'react';\nimport { useRef } from 'react';\nimport { useThree } from \"react-three-fiber\";\nimport { useFBX } from '@react-three/drei/useFBX';\n\nvar OneFBX = function OneFBX() {\n  _s();\n\n  var mesh = useRef();\n  var fbx = useFBX('/models/1.fbx');\n\n  var _useThree = useThree(),\n      gl = _useThree.gl,\n      canvas = _useThree.canvas;\n\n  console.log(fbx);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({}, fbx.children[1].children), {}, {\n    ref: mesh,\n    position: [0, 0, 0],\n    scale: [30, 30, 30],\n    name: \"Object_0\",\n    rotation: [0, 0, 0]\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(OneFBX, \"7jTCBnpOHJKwWYubt0Kn0famFyo=\", false, function () {\n  return [useFBX, useThree];\n});\n\n_c = OneFBX;\n\nvar UseFBXScene = function UseFBXScene() {\n  return /*#__PURE__*/_jsxDEV(OneFBX, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, _this);\n};\n\n_c2 = UseFBXScene;\nexport default _c3 = /*#__PURE__*/React.memo(UseFBXScene);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"OneFBX\");\n$RefreshReg$(_c2, \"UseFBXScene\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/Users/kirill/Desktop/DESIGN3D/components/baby.js"],"names":["THREE","React","useRef","useThree","useFBX","OneFBX","mesh","fbx","gl","canvas","console","log","children","UseFBXScene","memo"],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAsB,OAAtB;AACA,SAASC,QAAT,QAAwB,mBAAxB;AACA,SAASC,MAAT,QAAuB,0BAAvB;;AAIA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA;;AAEjB,MAAMC,IAAI,GAAGJ,MAAM,EAAnB;AACA,MAAIK,GAAG,GAAGH,MAAM,CAAC,eAAD,CAAhB;;AAHiB,kBAObD,QAAQ,EAPK;AAAA,MAKfK,EALe,aAKfA,EALe;AAAA,MAMfC,MANe,aAMfA,MANe;;AASjBC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AAEE,sBACE,gDACIA,GAAG,CAACK,QAAJ,CAAa,CAAb,EAAgBA,QADpB;AAEA,IAAA,GAAG,EAAEN,IAFL;AAGA,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHV;AAIA,IAAA,KAAK,EAAE,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,CAJP;AAKA,IAAA,IAAI,EAAC,UALL;AAMA,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AANV;AAAA;AAAA;AAAA;AAAA,WADF;AAYH,CAvBH;;GAAMD,M;UAGQD,M,EAIND,Q;;;KAPFE,M;;AAyBJ,IAAMQ,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,sBACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,WADJ;AAGD,CAJD;;MAAMA,W;AAMN,kCAAeZ,KAAK,CAACa,IAAN,CAAWD,WAAX,CAAf","sourcesContent":["import * as THREE from \"three\"\nimport React from 'react'\nimport { useRef} from 'react'\nimport { useThree} from \"react-three-fiber\"\nimport { useFBX } from '@react-three/drei/useFBX'\n\n\n\nconst OneFBX = () => {\n  \n    const mesh = useRef()\n    let fbx = useFBX('/models/1.fbx')\n    const { \n      gl,             \n      canvas,              \n    } = useThree()\n\n    console.log(fbx)\n\n      return (\n        <mesh\n        {...fbx.children[1].children}\n        ref={mesh}\n        position={[0, 0, 0]}\n        scale={[30,30,30]}\n        name=\"Object_0\"\n        rotation={[0, 0, 0]}\n      >\n            {/* <meshBasicMaterial  attach=\"material\" map={texture}/>   */}\n      </mesh>\n      )\n  }\n  \n  const UseFBXScene = () => {\n    return (\n        <OneFBX/>\n    )\n  }\n\n  export default React.memo(UseFBXScene)"]},"metadata":{},"sourceType":"module"}